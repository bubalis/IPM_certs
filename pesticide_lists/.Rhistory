out[name]<-multi_query(name)
}
sink(paste('keys', file))
toJSON(out)
sink()
}
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim('FTUSA_banned_test.txt', sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
out[name]<-multi_query(name)
}
sink(paste('keys', file))
toJSON(out)
sink()
}
}
if (is.na(response)){
return (NA)
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim(file, sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
out[name]<-multi_query(name)
}
sink(paste('keys', file))
toJSON(out)
sink()
}
}
?try
try(x<-'x')
try(100/0)
try('x'+'y')
try('x'+'y')
try('x'+'y')
print('Hello')
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim(file, sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
res=NULL
try(res<-multi_query(name))
out[name]<-res
}
sink(paste('keys', file, sep='_'))
toJSON(out)
sink()
print(out)
}
}
sink()
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim(file, sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
res=NULL
try(res<-multi_query(name))
out[name]<-res
}
sink(paste('keys', file, sep='_'))
print(toJSON(out))
sink()
}
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
q
sf
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
library (webchem)
library (jsonlite)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
CAS_CIDretriever <-function( name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
\
CAS_CIDretriever('Tributyltin fluoride')
CAS_CIDretriever('Dinoseb')
CAS_CIDretriever('Dinoseb amine salt')
CAS_CIDretriever('Captofol')
multi_query("Captofol")
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim(file, sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
res=NULL
try(res<-multi_query(name))
out[name]<-res
}
sink(paste('keys', file, sep='_'))
print(toJSON(out))
sink()
}
}
out<-list()
out
out['name']<- 'name'
out
out['blue']<'green'
out['blue']<-'green'
out
'blue' %in%out
'green' %in% out
?out
out['green']
out$blue
out$name
out$index
out['blue']
out
out[[1]]
out[[2]]
c(out)
out[[1]]
out[[2]]
?list
unlist(out)
x=unlist(out)
x[[1]]
x[[2]]
x.index
x$index
x$columns
out
names(out)
'blue' in names(out)
'blue' %in% names(out)
!'blue' %in% names(out)
!False
!FALSE
!TRUE
!!TRUE
!!!TRUE
library (webchem)
library (jsonlite)
CAS_CIDretriever <-function(name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim(file, sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
if (!name %in% names(out))
res=NULL
try(res<-multi_query(name))
out[name]<-res
}
sink(paste('keys', file, sep='_'))
print(toJSON(out))
sink()
}
}
library (webchem)
library (jsonlite)
CAS_CIDretriever <-function(name){
response=get_cid(name)
if (is.na(response)){
return (NA)
}
else{
r=cts_convert(response[[2]], from='pubchem cid', to="cas")
return (r[[1]])}
}
multi_query<- function(name){
print(name)
response<- aw_query(name, from = 'name')
if (is.na(response[[1]])){
print('Failed Trying again')
response<-ci_query(name, from ='name' )
}
else{return(response[[1]]$cas) }
if (is.na(response[[1]])){
print('Failed Trying again')
response<-CAS_CIDretriever(name)}
else{return(response[[1]]$cas)}
if (is.na(response[[1]])){return (NA)}
else{
return (response)
}
}
for (file in list.files() ){
if (grepl('.txt', file, fixed = TRUE)){
data<- read.delim(file, sep='\n', header=FALSE)
out<-  list()
for (name in data$V1){
if (!name %in% names(out))
res=NULL
try(res<-multi_query(name))
out[name]<-res
}
sink(paste('keys', file, sep='_'))
print(toJSON(out))
sink()
}
}
